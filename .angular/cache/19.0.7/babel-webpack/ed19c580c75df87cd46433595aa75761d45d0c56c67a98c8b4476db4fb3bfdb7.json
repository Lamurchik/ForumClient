{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eajli/OneDrive/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/\\u0440\\u0430\\u0431\\u043E\\u0442\\u044B \\u0432 \\u0432\\u0443\\u0437\\u0435/\\u0434\\u0438\\u043F\\u043B\\u043E\\u043C/ForumClient/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PostFeedComponent } from '../post-feed/post-feed.component';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../..//services/grapql.service\";\nimport * as i2 from \"@angular/common\";\nfunction PostPaginatorComponent_Conditional_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function PostPaginatorComponent_Conditional_5_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.previousPage());\n    });\n    i0.ɵɵtext(1, \"\\u041D\\u0430\\u0437\\u0430\\u0434\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction PostPaginatorComponent_Conditional_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 2);\n    i0.ɵɵlistener(\"click\", function PostPaginatorComponent_Conditional_6_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.nextPage());\n    });\n    i0.ɵɵtext(1, \"\\u0412\\u043F\\u0435\\u0440\\u0435\\u0434\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let PostPaginatorComponent = /*#__PURE__*/(() => {\n  class PostPaginatorComponent {\n    graphQLService;\n    cdr;\n    posts = [{\n      id: 5\n    }, {\n      id: 6\n    }];\n    currentStartCursor;\n    currentEndCursor;\n    hasNextPage = false;\n    hasPreviousPage = false;\n    totalCount = 0;\n    loading = false;\n    pageSize = 10;\n    constructor(graphQLService, cdr) {\n      this.graphQLService = graphQLService;\n      this.cdr = cdr;\n      console.log(\"коструктор\");\n      console.log('Данные которые передаём коструктор', this.posts); // теперь будет корректно\n    }\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield _this.loadPosts().then(p => console.log(\"дождались\"));\n        console.log('Данные которые перадаём в ngOnInit', _this.posts); //выполняеться до- тут пусто\n      })();\n    }\n    //first: ${after ? this.pageSize : \"null\"}\n    loadPosts(before, after) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.loading = true;\n        const query = `\n      query  {\n        postsPaging(\n          first: ${_this2.pageSize}\n          after: ${after ? `\"${after}\"` : \"null\"}\n          last: ${before ? _this2.pageSize : \"null\"}\n          before: ${before ? `\"${before}\"` : \"null\"}\n          order: { dateCreate: ASC }\n          where: { userAuthorId: { eq: ${_this2.graphQLService.getUserId()} } }\n        ) {\n          totalCount\n          pageInfo {\n            endCursor\n            hasNextPage\n            hasPreviousPage\n            startCursor\n          }\n          nodes {\n            title\n            id\n            getImage\n            user {\n              nickName\n            }\n            tags {\n              id\n              name\n            }\n          }\n        }\n      }\n    `;\n        console.log(query);\n        try {\n          const response = yield _this2.graphQLService.RequestString({\n            query\n          }).toPromise();\n          console.log('Полный ответ сервера:', response);\n          if (response?.data?.postsPaging) {\n            const data = response.data.postsPaging;\n            _this2.posts = [...data.nodes];\n            _this2.totalCount = data.totalCount;\n            _this2.currentStartCursor = data.pageInfo.startCursor;\n            _this2.currentEndCursor = data.pageInfo.endCursor;\n            _this2.hasNextPage = data.pageInfo.hasNextPage;\n            _this2.hasPreviousPage = data.pageInfo.hasPreviousPage;\n            console.log('Данные успешно обновлены:', _this2.posts);\n          } else {\n            console.warn('Некорректная структура ответа');\n            _this2.posts = [];\n          }\n        } catch (error) {\n          console.error('Ошибка при загрузке постов:', error);\n          _this2.posts = [];\n        } finally {\n          _this2.loading = false;\n        }\n        console.log('Данные которые передаём', _this2.posts); // теперь будет корректно\n        _this2.cdr.detectChanges();\n      })();\n    }\n    nextPage() {\n      if (this.hasNextPage) {\n        this.loadPosts(undefined, this.currentEndCursor);\n      }\n    }\n    previousPage() {\n      if (this.hasPreviousPage) {\n        this.loadPosts(this.currentStartCursor, undefined);\n      }\n    }\n    get noPosts() {\n      return !this.loading && this.posts.length === 0;\n    }\n    static ɵfac = function PostPaginatorComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || PostPaginatorComponent)(i0.ɵɵdirectiveInject(i1.GraphQLService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: PostPaginatorComponent,\n      selectors: [[\"app-post-paginator\"]],\n      decls: 7,\n      vars: 6,\n      consts: [[3, \"posts\"], [1, \"pagination-controls\"], [3, \"click\"]],\n      template: function PostPaginatorComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"pre\");\n          i0.ɵɵtext(1);\n          i0.ɵɵpipe(2, \"json\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(3, \"app-post-feed\", 0);\n          i0.ɵɵelementStart(4, \"div\", 1);\n          i0.ɵɵtemplate(5, PostPaginatorComponent_Conditional_5_Template, 2, 0, \"button\")(6, PostPaginatorComponent_Conditional_6_Template, 2, 0, \"button\");\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 4, ctx.posts));\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"posts\", ctx.posts);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(ctx.hasPreviousPage ? 5 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx.hasNextPage ? 6 : -1);\n        }\n      },\n      dependencies: [PostFeedComponent, CommonModule, i2.JsonPipe],\n      styles: [\".paginator-container[_ngcontent-%COMP%]{background-color:#1a1a1a;color:#e0e0e0;padding:20px;border-radius:8px;max-width:800px;margin:0 auto}.controls[_ngcontent-%COMP%]{display:flex;justify-content:space-between;align-items:center;margin-bottom:20px;gap:15px}.nav-button[_ngcontent-%COMP%]{background-color:#2d2d2d;color:#fff;border:1px solid #404040;padding:8px 16px;border-radius:4px;cursor:pointer;transition:all .3s ease;min-width:100px}.nav-button[_ngcontent-%COMP%]:hover:not(:disabled){background-color:#3d3d3d;border-color:#505050}.nav-button[_ngcontent-%COMP%]:disabled{background-color:#252525;color:#707070;cursor:not-allowed}.counter[_ngcontent-%COMP%]{flex-grow:1;text-align:center;font-size:.9em;color:#a0a0a0}\"]\n    });\n  }\n  return PostPaginatorComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}