{"ast":null,"code":"import { FormsModule } from \"@angular/forms\";\nimport { GraphQLService } from \"../../../services/grapql.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../services/grapql.service\";\nimport * as i2 from \"@angular/forms\";\nfunction LoginComponent_Conditional_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    QLService;\n    // Переменные для хранения данных из формы\n    email = '';\n    password = '';\n    showPassword = false; // Флаг для отображения пароля\n    errorMessage = ''; // <-- Поле для текста ошибки\n    // Метод для переключения видимости пароля\n    togglePasswordVisibility() {\n      this.showPassword = !this.showPassword;\n    }\n    // В классе LoginComponent добавь свойство для иконки\n    get eyeIcon() {\n      return this.showPassword ? '◎' : '◉';\n    }\n    constructor(QLService) {\n      this.QLService = QLService;\n    }\n    onSubmit() {\n      this.errorMessage = ''; // очищаем ошибку перед новым запросом\n      const query = `\n      mutation {\n        signIn(email: \"${this.email}\", password: \"${this.password}\") {\n          id\n          message\n          token\n        }\n      }\n    `;\n      this.QLService.RequestString({\n        query\n      }).subscribe(response => {\n        const result = response.data.signIn;\n        if (result.message) {\n          // Если сервер вернул ошибку\n          this.errorMessage = result.message;\n        } else {\n          // Всё ок — сохраняем токен и id\n          this.QLService.setToken(result.token);\n          this.QLService.setUserId(result.id);\n          console.log('Успешный вход!');\n          // Тут можно сделать переход на главную страницу, если хочешь\n        }\n      }, error => {\n        // Если вообще ошибка запроса\n        this.errorMessage = 'Ошибка соединения с сервером.';\n      });\n    }\n    static ɵfac = function LoginComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || LoginComponent)(i0.ɵɵdirectiveInject(i1.GraphQLService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: LoginComponent,\n      selectors: [[\"login-app\"]],\n      features: [i0.ɵɵProvidersFeature([GraphQLService])],\n      decls: 20,\n      vars: 8,\n      consts: [[1, \"login-container\"], [3, \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"required\", \"\", \"placeholder\", \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u0432\\u0430\\u0448 email\", 3, \"ngModelChange\", \"ngModel\"], [1, \"error-message\"], [\"for\", \"password\"], [1, \"password-input\"], [\"id\", \"password\", \"name\", \"password\", \"required\", \"\", \"placeholder\", \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\", 3, \"ngModelChange\", \"type\", \"ngModel\"], [\"type\", \"button\", 1, \"toggle-password\", 3, \"click\"], [\"type\", \"submit\", 1, \"submit-btn\"], [\"href\", \"register\", 1, \"link\"]],\n      template: function LoginComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"\\u0412\\u0445\\u043E\\u0434 \\u0432 \\u0441\\u0438\\u0441\\u0442\\u0435\\u043C\\u0443\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_3_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n          i0.ɵɵtext(6, \"Email\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"input\", 4);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_7_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.email, $event) || (ctx.email = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(8, LoginComponent_Conditional_8_Template, 2, 1, \"div\", 5);\n          i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\", 6);\n          i0.ɵɵtext(11, \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(12, \"div\", 7)(13, \"input\", 8);\n          i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_Template_input_ngModelChange_13_listener($event) {\n            i0.ɵɵtwoWayBindingSet(ctx.password, $event) || (ctx.password = $event);\n            return $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"button\", 9);\n          i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_14_listener() {\n            return ctx.togglePasswordVisibility();\n          });\n          i0.ɵɵtext(15);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(16, \"button\", 10);\n          i0.ɵɵtext(17, \"\\u0412\\u043E\\u0439\\u0442\\u0438\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(18, \"a\", 11);\n          i0.ɵɵtext(19, \"\\u0437\\u0430\\u0440\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.email);\n          i0.ɵɵadvance();\n          i0.ɵɵconditional(ctx.errorMessage ? 8 : -1);\n          i0.ɵɵadvance(5);\n          i0.ɵɵproperty(\"type\", ctx.showPassword ? \"text\" : \"password\");\n          i0.ɵɵtwoWayProperty(\"ngModel\", ctx.password);\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"closed\", !ctx.showPassword);\n          i0.ɵɵattribute(\"aria-label\", ctx.showPassword ? \"\\u0421\\u043A\\u0440\\u044B\\u0442\\u044C \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\" : \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C\");\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.eyeIcon, \" \");\n        }\n      },\n      dependencies: [FormsModule, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n      encapsulation: 2\n    });\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}