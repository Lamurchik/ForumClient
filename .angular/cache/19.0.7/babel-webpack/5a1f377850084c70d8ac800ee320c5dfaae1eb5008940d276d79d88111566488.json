{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let GraphQLService = /*#__PURE__*/(() => {\n  class GraphQLService {\n    http;\n    hostName = \"https://localhost:7143/graphql\";\n    constructor(http) {\n      this.http = http;\n    }\n    get token() {\n      return localStorage.getItem('token');\n    }\n    setToken(token) {\n      localStorage.setItem('token', token);\n    }\n    getUserId() {\n      const userIdStr = localStorage.getItem('userId');\n      return userIdStr ? +userIdStr : null;\n    }\n    setUserId(userId) {\n      localStorage.setItem('userId', userId.toString());\n    }\n    clearAuthData() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('userId');\n    }\n    RequestString(body) {\n      let headersConfig = {\n        'Content-Type': 'application/json'\n      };\n      if (this.token) {\n        headersConfig['Authorization'] = `Bearer ${this.token}`;\n      }\n      const headers = new HttpHeaders(headersConfig);\n      return this.http.post(this.hostName, body, {\n        headers\n      });\n    }\n    RequestMultipart(operations, map, file) {\n      const formData = new FormData();\n      formData.append('operations', JSON.stringify(operations));\n      formData.append('map', JSON.stringify(map));\n      formData.append('0', file, file.name);\n      const headers = new HttpHeaders();\n      if (this.token) {\n        headers.set('Authorization', `Bearer ${this.token}`);\n      }\n      return this.http.post(this.hostName, formData, {\n        headers\n      });\n    }\n    static ɵfac = function GraphQLService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || GraphQLService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: GraphQLService,\n      factory: GraphQLService.ɵfac\n    });\n  }\n  return GraphQLService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}